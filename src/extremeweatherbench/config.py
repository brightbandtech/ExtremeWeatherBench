"""Module defining congifuration objects for driving ExtremeWeatherBench analyses."""

import dataclasses
from typing import List, Optional

# TODO(taylor): once uv/ruff/pyproject.toml is set up, remove relative imports
from extremeweatherbench import events

DEFAULT_OUTPUT_DIR = "assets/data/outputs/"
DEFAULT_FORECAST_DIR = "assets/data/forecasts/"
ARCO_ERA5_FULL_URI = (
    "gs://gcp-public-data-arco-era5/ar/full_37-1h-0p25deg-chunk-1.zarr-v3"
)


@dataclasses.dataclass
class Config:
    """High-level configuration for an ExtremeWeatherBench analysis run.

    The Config class defines datae ranges, output directories, and any custom
    behavior that should used when running an end-to-end ExtremeWeatherBench
    analysis. We prescribe sensible defaults for consistency, but these can be
    extended as desired by the user.

    Attributes:
        output_dir: A directory where outputs generated by the analysis should be saved.
        forecast_dir: A directory where forecast data to be analyzed by EWB is stored.
        gridded_obs_path: A URI or filepath where a gridded observation dataset that can
            be used for evaluation is stored. Defaults to ARCO-ERA5 on Google Cloud
            Storage.
        point_obs_path: (optional) A URI or filepath where a point observation dataset
            that be used for evaluation is stored.
        event_types: A list of event types to evaluate.
        cache: Enable caching of intermedaite data and artifacts generated by an EWB
            analysis. Defaults to "False".
    """

    output_dir: str = DEFAULT_OUTPUT_DIR
    forecast_dir: str = DEFAULT_FORECAST_DIR
    gridded_obs_path: str = ARCO_ERA5_FULL_URI
    point_obs_path: Optional[str] = None
    event_types: List[events.Event] = dataclasses.field(
        default_factory=lambda: [events.HeatWave(), events.Freeze()]
    )
    cache: bool = False


# TODO(daniel): Convert to just a dictionary mapping, since that's all this is. No need
# for a dataclass here. Can also use a defaultdict that reflexively maps to keys added
# to the mapping unless otherwise specified.
@dataclasses.dataclass
class ForecastSchemaConfig:
    """A mapping between standard variable names used across EWB, and their counterpart
    in a forecast dataset.

    Allows users to insert custom schemas for decoding forecast data. Defaults are
    suggested based on the CIRA AI model schema (https://aiweather.cira.colostate.edu), which
    uses a variant of standard WMO GRIB2 paramIds.
    """

    # TODO(daniel): Strongly suggest converting to use either CF Standard Names (https://cfconventions.org/Data/cf-standard-names/current/build/cf-standard-name-table.html)
    # or WMO GRIB2 "Name" values (first column in https://codes.ecmwf.int/grib/param-db/)
    # as these are far less ambiguous.
    t2: Optional[str] = "t2"
    u10: Optional[str] = "u10"
    v10: Optional[str] = "v10"
    msl: Optional[str] = "msl"
    q: Optional[str] = "q"
    time: Optional[str] = "time"
    init_time: Optional[str] = "init_time"
    fhour: Optional[str] = "fhour"
    level: Optional[str] = "level"
    latitude: Optional[str] = "latitude"
    longitude: Optional[str] = "longitude"
